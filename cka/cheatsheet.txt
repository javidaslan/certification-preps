# create pod
kubectl run nginx --image nginx:latest

# create pod dry-run client and generate manifest
kubectl run nginx --image nginx:latest --dry-run=client -o yaml

# scale replicaset
kubectl scale -f <file_name> --replicas=<number> 
or
kubectl scale rs/<name> --replicas=<number>

# Create a deployment
kubectl create deployment --image=nginx nginx

# Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

# Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml

#Make necessary changes to the file (for example, adding more replicas) and then create the deployment.
kubectl create -f nginx-deployment.yaml

# Expose deployment via service
kubectl expose deployment <deployment> --port <portnumber> --target-port <portnumber>

# update image in deployment
kubectl set image deployment <deployment> <image>

# Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)